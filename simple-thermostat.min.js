!(function(t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
    ? define(e)
    : ((t = t || self).SimpleThermostat = e())
})(this, function() {
  'use strict'
  window.JSCompiler_renameProperty = function(t, e) {
    return t
  }
  let t = [],
    e = document.createTextNode('')
  new window.MutationObserver(function() {
    const e = t.length
    for (let i = 0; i < e; i++) {
      let e = t[i]
      if (e)
        try {
          e()
        } catch (t) {
          setTimeout(() => {
            throw t
          })
        }
    }
    t.splice(0, e)
  }).observe(e, { characterData: !0 })
  class i {
    constructor() {
      ;(this._asyncModule = null), (this._callback = null), (this._timer = null)
    }
    setConfig(t, e) {
      ;(this._asyncModule = t),
        (this._callback = e),
        (this._timer = this._asyncModule.run(() => {
          ;(this._timer = null), this._callback()
        }))
    }
    cancel() {
      this.isActive() &&
        (this._asyncModule.cancel(this._timer), (this._timer = null))
    }
    flush() {
      this.isActive() && (this.cancel(), this._callback())
    }
    isActive() {
      return null != this._timer
    }
    static debounce(t, e, n) {
      return t instanceof i ? t.cancel() : (t = new i()), t.setConfig(e, n), t
    }
  }
  var n = n || Object.getPrototypeOf(customElements.get('hui-error-entity-row'))
  const s = n.prototype.html
  function o(t) {
    const [e, i] = String(t).split('.')
    return `${e}.${i || '0'}`
  }
  const r = 1e3,
    a = 0.5,
    l = ['entity', 'sensors', '_temperature'],
    c = {
      auto: 'hass:autorenew',
      manual: 'hass:cursor-pointer',
      heat: 'hass:fire',
      cool: 'hass:snowflake',
      off: 'hass:power',
      fan_only: 'hass:fan',
      eco: 'hass:leaf',
      dry: 'hass:water-percent',
      idle: 'hass:power',
    },
    h = {
      off: 'mdi:radiator-off',
      on: 'mdi:radiator',
      idle: 'mdi:radiator-disabled',
      heat: 'mdi:radiator',
      cool: 'mdi:snowflake',
      auto: 'mdi:radiator',
      manual: 'mdi:radiator',
      boost: 'mdi:fire',
      away: 'mdi:radiator-disabled',
    },
    d = { temperature: !1, state: !1, mode: !1 }
  class p extends n {
    static get properties() {
      return {
        _hass: Object,
        config: Object,
        entity: Object,
        sensors: Array,
        icon: String,
        _temperature: { type: Number, notify: !0 },
        _mode: String,
        _hide: Object,
        name: String,
      }
    }
    constructor() {
      super(),
        (this._hass = null),
        (this.entity = null),
        (this.icon = null),
        (this.sensors = []),
        (this._stepSize = a),
        (this._temperature = null),
        (this._mode = null),
        (this._hide = d)
    }
    set hass(t) {
      this._hass = t
      const e = t.states[this.config.entity]
      if (this.entity !== e) {
        this.entity = e
        const {
          attributes: {
            operation_mode: t,
            operation_list: i = [],
            temperature: n,
          },
        } = e
        ;(this._temperature = n), (this._mode = t)
      }
      this.config.icon ? (this.icon = this.config.icon) : (this.icon = h),
        this.config.step_size && (this._stepSize = this.config.step_size),
        this.config.hide && (this._hide = { ...d, ...this.config.hide }),
        'string' == typeof this.config.name
          ? (this.name = this.config.name)
          : !1 === this.config.name
          ? (this.name = !1)
          : (this.name = e.attributes.friendly_name),
        this.config.sensors &&
          (this.sensors = this.config.sensors.map(
            ({ name: e, entity: i, attribute: n }) => {
              let s
              const o = [e]
              return (
                i
                  ? ((s = t.states[i]),
                    o.push(s && s.attributes && s.attributes.friendly_name))
                  : n &&
                    n in this.entity.attributes &&
                    ((s = this.entity.attributes[n]), o.push(n)),
                o.push(i),
                { name: o.find(t => !!t), state: s, entity: i }
              )
            }
          ))
    }
    shouldUpdate(t) {
      return l.some(e => t.has(e))
    }
    localize(t, e = '') {
      const i = this._hass.selectedLanguage || this._hass.language,
        n = `${e}${t}`,
        s = this._hass.resources[i]
      return n in s ? s[n] : t
    }
    render({ _hass: t, _hide: e, config: i, entity: n, sensors: r } = this) {
      if (!n) return
      const {
          state: a,
          attributes: {
            min_temp: l = null,
            max_temp: c = null,
            current_temperature: h,
            operation_list: d = [],
            operation_mode: p,
          },
        } = n,
        m = this._hass.config.unit_system.temperature,
        u = [
          e.temperature
            ? null
            : this.renderInfoItem(`${o(h)}${m}`, 'Temperature'),
          e.state
            ? null
            : this.renderInfoItem(this.localize(a, 'state.climate.'), 'State'),
          e.mode ? null : this.renderModeSelector(d, p),
          r.map(({ name: t, state: e }) => e && this.renderInfoItem(e, t)) ||
            null,
        ].filter(t => null !== t),
        f = this.handleTemperatureChange.bind(this, +this._stepSize),
        _ = this.handleTemperatureChange.bind(this, -this._stepSize)
      return s`
      ${s`
    <style is="custom-style">
      ha-card {
        --thermostat-font-size-xl: var(--paper-font-display3_-_font-size);
        --thermostat-font-size-l: var(--paper-font-display2_-_font-size);
        --thermostat-font-size-m: var(--paper-font-title_-_font-size);
        --thermostat-font-size-title: 24px;

        font-family: var(--paper-font-body1_-_font-family);
        -webkit-font-smoothing: var(
          --paper-font-body1_-_-webkit-font-smoothing
        );
        font-size: var(--paper-font-body1_-_font-size);
        font-weight: var(--paper-font-body1_-_font-weight);
        line-height: var(--paper-font-body1_-_line-height);

        padding-bottom: 16px;
      }

      ha-card.no-header {
        padding: 16px 0;
      }

      .body {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: center;
      }
      .main {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
      }
      .sensors {
        font-size: 1.1em;
      }
      table:empty {
        display: none;
      }
      .mode-selector {
        --paper-dropdown-menu: {
          display: inline;
        }
        --paper-input-container: {
          padding: 0;
        }
      }
      header {
        display: flex;
        flex-direction: row;

        font-family: var(--paper-font-headline_-_font-family);
        -webkit-font-smoothing: var(
          --paper-font-headline_-_-webkit-font-smoothing
        );
        font-size: var(--paper-font-headline_-_font-size);
        font-weight: var(--paper-font-headline_-_font-weight);
        letter-spacing: var(--paper-font-headline_-_letter-spacing);
        line-height: var(--paper-font-headline_-_line-height);
        text-rendering: var(
          --paper-font-common-expensive-kerning_-_text-rendering
        );
        opacity: var(--dark-primary-opacity);
        padding: 24px 16px 16px;
      }
      .icon {
        margin-right: 8px;
        color: var(--paper-item-icon-color, #44739e);
      }
      .title {
        font-size: var(--thermostat-font-size-title);
        line-height: var(--thermostat-font-size-title);
        font-weight: normal;
        margin: 0;
        align-self: left;
      }
      .current-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .current--value {
        margin: 0;
        font-size: var(--thermostat-font-size-xl);
        font-weight: 400;
        line-height: var(--thermostat-font-size-xl);
      }
      .current--unit {
        font-size: var(--thermostat-font-size-m);
      }
      .thermostat-trigger {
        padding: 0px;
      }
      .sensors th {
        text-align: right;
        font-weight: 300;
        padding-right: 8px;
        padding-bottom: 4px;
      }
      .sensors td {
        padding-bottom: 4px;
      }
      .sensors td.clickable {
        cursor: pointer;
      }
    </style>
  `}
      <ha-card class="${this.name ? '' : 'no-header'}">
        ${this.renderHeader()}
        <section class="body">
          <table class="sensors">
            ${u}
          </table>

          <div class="main">
            <div class="current-wrapper">
              <paper-icon-button
                class="thermostat-trigger"
                icon="hass:chevron-up"
                @click="${f}"
              >
              </paper-icon-button>

              <div
                class="current"
                @click="${() => this.openEntityPopover(i.entity)}"
              >
                <h3 class="current--value">
                  ${o(this._temperature)}
                </h3>
              </div>
              <paper-icon-button
                class="thermostat-trigger"
                icon="hass:chevron-down"
                @click="${_}"
              >
              </paper-icon-button>
            </div>
            <span class="current--unit">${m}</span>
          </div>
        </section>
      </ha-card>
    `
    }
    renderHeader() {
      if (!1 === this.name) return ''
      let t = this.icon
      const { state: e } = this.entity
      return (
        'object' == typeof this.icon && (t = e in this.icon && this.icon[e]),
        s`
      <header>
        ${(t &&
          s`
              <ha-icon class="icon" .icon=${t}></ha-icon>
            `) ||
          ''}
        <h2 class="title">${this.name}</h2>
      </header>
    `
      )
    }
    renderModeSelector(t, e) {
      const i = t.indexOf(e)
      return s`
      <tr>
        <th>Mode:</th>
        <td style="max-width: 4em;">
          <paper-dropdown-menu
            class="mode-selector"
            no-label-float
            noink
            no-animations
            vertical-offset="26"
            @selected-item-changed="${this.setMode}"
          >
            <paper-listbox
              items="${t}"
              slot="dropdown-content"
              class="dropdown-content"
              selected="${i}"
            >
              ${t.map(
                t => s`
                      <paper-item mode-value="${t}">
                        <ha-icon .icon=${c[t]}></ha-icon>
                        ${this.localize(t, 'state.climate.')}
                      </paper-item>
                    `
              )}
            </paper-listbox>
          </paper-dropdown-menu>
        </td>
      </tr>
    `
    }
    renderInfoItem(t, e) {
      if (!t) return
      let i
      if ('object' == typeof t) {
        let e = t.state
        if ('device_class' in t.attributes) {
          const [i] = t.entity_id.split('.'),
            n = ['state', i, t.attributes.device_class, ''].join('.')
          e = this.localize(t.state, n)
        }
        i = s`
        <td
          class="clickable"
          @click="${() => this.openEntityPopover(t.entity_id)}"
        >
          ${e} ${t.attributes.unit_of_measurement}
        </td>
      `
      } else
        i = s`
        <td>${t}</td>
      `
      return s`
      <tr>
        <th>${e}:</th>
        ${i}
      </tr>
    `
    }
    handleTemperatureChange(t, e) {
      e.stopPropagation(), this.setTemperature(this._temperature + t)
    }
    setTemperature(t) {
      this._debouncedSetTemperature = i.debounce(
        this._debouncedSetTemperature,
        {
          run: e => ((this._temperature = t), window.setTimeout(e, r)),
          cancel: t => window.clearTimeout(t),
        },
        () => {
          this._hass.callService('climate', 'set_temperature', {
            entity_id: this.config.entity,
            temperature: this._temperature,
          })
        }
      )
    }
    setMode(t) {
      const {
        detail: { value: e },
      } = t
      if (!e) return
      const i = e.getAttribute('mode-value')
      i &&
        i !== this._mode &&
        this._hass.callService('climate', 'set_operation_mode', {
          entity_id: this.config.entity,
          operation_mode: i,
        })
    }
    openEntityPopover(t) {
      this.fire('hass-more-info', { entityId: t })
    }
    fire(t, e, i) {
      ;(i = i || {}), (e = null == e ? {} : e)
      const n = new Event(t, {
        bubbles: void 0 === i.bubbles || i.bubbles,
        cancelable: Boolean(i.cancelable),
        composed: void 0 === i.composed || i.composed,
      })
      return (n.detail = e), this.dispatchEvent(n), n
    }
    setConfig(t) {
      if (!t.entity) throw new Error('You need to define an entity')
      this.config = t
    }
    getCardSize() {
      return 3
    }
  }
  return window.customElements.define('simple-thermostat', p), p
})
